---
# tasks file for llm_tools

- name: Ensure Docker network exists
  community.docker.docker_network:
    name: "{{ llm_network_name }}"
    state: present
  become: true

- name: Start Open-WebUI container
  community.docker.docker_container:
    name: open-webui
    image: ghcr.io/open-webui/open-webui:main
    restart_policy: unless-stopped
    networks:
      - name: "{{ llm_network_name }}"
    env:
      OLLAMA_BASE_URL: "{{ ollama_base_url_for_webui }}"
    volumes:
      - open-webui:/app/backend/data
    ports:
      - "{{ open_webui_http_port }}:8080"
    labels:
      wud.tag.include: main
      wud.watch.digest: "true"
      homepage.group: "{{ services['open-webui'].group }}"
      homepage.name: "{{ services['open-webui'].name }}"
      homepage.href: https://open-webui.lan
      homepage.icon: openai.png
      homepage.server: "{{ inventory_hostname }}"
      homepage.container: open-webui
  become: true

# Block for MCP-Bridge setup
- name: MCP-Bridge Setup
  become: true # Most Docker and file operations need sudo
  block:
    - name: Define MCP-Bridge related facts
      ansible.builtin.set_fact:
        mcp_bridge_config_full_host_path: "{{ mcp_bridge_config_dir_host }}/{{ mcp_bridge_config_filename }}"

    - name: Ensure MCP-Bridge source directory exists
      ansible.builtin.file:
        path: "{{ mcp_bridge_src_path | ansible.builtin.dirname }}"
        state: directory
        mode: "0755"

    - name: Clone or update the MCP-Bridge repository
      ansible.builtin.git:
        repo: "{{ mcp_bridge_repo_url }}"
        dest: "{{ mcp_bridge_src_path }}"
        version: "{{ mcp_bridge_repo_version }}"
        force: true
        depth: 1
      register: git_clone_mcp_bridge_result

    - name: Pin MCP version in pyproject.toml for MCP-Bridge
      ansible.builtin.replace:
        path: "{{ mcp_bridge_src_path }}/pyproject.toml"
        regexp: 'mcp>=1\.2\.0'
        replace: 'mcp==1.7.0'
      register: pin_mcp_version_result

    - name: Build the MCP-Bridge image
      community.docker.docker_image:
        name: "{{ mcp_bridge_image }}"
        source: build
        force_source: "{{ git_clone_mcp_bridge_result.changed or pin_mcp_version_result.changed or force_update | default(false) }}"
        build:
          path: "{{ mcp_bridge_src_path }}"
          pull: true # Attempt to pull base images for the build
          rm: true # Remove intermediate containers after a successful build
        state: present

    - name: Ensure MCP-Bridge config directory exists on host
      ansible.builtin.file:
        path: "{{ mcp_bridge_config_dir_host }}"
        state: directory
        mode: "0755"

    - name: Template MCP-Bridge config.json
      ansible.builtin.template:
        src: mcp_bridge_config.json.j2
        dest: "{{ mcp_bridge_config_full_host_path }}"
        mode: "0644"
      notify: Restart MCP-Bridge container

    - name: Define MCP-Bridge container environment variables
      ansible.builtin.set_fact:
        mcp_bridge_env_vars:
          MCP_BRIDGE__CONFIG__FILE: "/app/config.json" # Points to the mounted config file

    - name: Start the MCP-Bridge container
      community.docker.docker_container:
        name: "{{ mcp_bridge_container_name }}"
        image: "{{ mcp_bridge_image }}"
        state: started
        detach: true
        ports:
          - "{{ mcp_bridge_service_port }}:8000"
        volumes:
          - "{{ mcp_bridge_config_full_host_path }}:/app/config.json:ro" # Mount config read-only
        env: "{{ mcp_bridge_env_vars }}"
        networks:
          - name: "{{ llm_network_name }}"
        restart_policy: "unless-stopped"


- name: LiteLLM Proxy Setup
  become: true
  block:
    - name: Define LiteLLM Proxy related facts
      ansible.builtin.set_fact:
        litellm_proxy_config_full_host_path: "{{ litellm_proxy_config_dir_host }}/{{ litellm_proxy_config_filename }}"

    - name: Ensure LiteLLM Proxy config directory exists on host
      ansible.builtin.file:
        path: "{{ litellm_proxy_config_dir_host }}"
        state: directory
        mode: "0755"

    - name: Template LiteLLM Proxy config.yaml
      ansible.builtin.template:
        src: litellm_config.yaml.j2
        dest: "{{ litellm_proxy_config_full_host_path }}"
        mode: "0644"
      notify: Restart LiteLLM Proxy container

    - name: Define LiteLLM Proxy container environment variables
      ansible.builtin.set_fact:
        litellm_proxy_env_vars:
          LANGFUSE_PUBLIC_KEY: "{{ langfuse_homelab_public_key }}"
          LANGFUSE_SECRET_KEY: "{{ langfuse_homelab_secret_key }}"
          LANGFUSE_HOST: "{{ langfuse_host_for_litellm }}"
          LITELLM_MASTER_KEY: "{{ litellm_master_key }}"
          GEMINI_API_KEY: "{{ GEMINI_API_KEY }}"
          OPENROUTER_API_KEY: "{{ OPENROUTER_API_KEY }}"
          # LITELLM_LOG_LEVEL: "DEBUG"

    - name: Start LiteLLM Proxy container
      community.docker.docker_container:
        name: "{{ litellm_proxy_container_name }}"
        image: "{{ litellm_proxy_image }}"
        state: started
        detach: true
        ports:
          - "{{ litellm_proxy_port_host }}:{{ litellm_proxy_port_container }}"
        volumes:
          - "{{ litellm_proxy_config_full_host_path }}:/app/config.yaml:ro"
        env: "{{ litellm_proxy_env_vars }}"
        command: ["--config", "/app/config.yaml", "--port", "{{ litellm_proxy_port_container }}"] # Add --detailed_debug here if needed for troubleshooting
        networks:
          - name: "{{ llm_network_name }}"
        restart_policy: "unless-stopped"
      register: litellm_proxy_container_result

    - name: Debug LiteLLM Proxy container result
      ansible.builtin.debug:
        var: litellm_proxy_container_result
      when: litellm_proxy_container_result is defined and litellm_proxy_container_result.changed

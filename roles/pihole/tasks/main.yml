---
- ansible.builtin.set_fact:
    pihole_service: "{{ services['pihole-'~inventory_hostname] }}"
    leases_service: "{{ services['dnsmasq-leases-ui-'~inventory_hostname] }}"

- ansible.builtin.debug:
    var: pihole_service
- ansible.builtin.debug:
    var: leases_service

- name: Create folder config folders
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ pihole_config_folder }}"
    - "{{ dnsmasq_config_folder }}"

- name: Add custom dns list
  ansible.builtin.template:
    src: custom.list.j2
    dest: "{{ pihole_config_folder }}/custom.list"
    owner: "{{ username }}"
  notify: restart dns

- name: Create dnsmasq config for static DHCP leases and DNS
  ansible.builtin.template:
    src: dhcp_conf.j2
    dest: "{{ dnsmasq_config_folder }}/04-static-dhcp.conf"
    owner: "{{ username }}"
  notify: restart dns

- name: Start pihole
  community.docker.docker_compose_v2:
    project_name: pihole
    pull: always # Set to "always", "missing", "never", or "policy" based on your needs
    state: present # Ensure the services are started
    definition:
      networks:
        backend:
          ipam:
            config:
              - subnet: 172.31.0.0/16
        proxy-tier:
          external: true
      services:
        pihole:
          container_name: pihole
          hostname: pihole
          image: pihole/pihole:latest
          ports:
            - "{{ ansible_default_ipv4.address }}:53:53/tcp"
            - "{{ ansible_default_ipv4.address }}:53:53/udp"
            # - "{{ ansible_default_ipv4.address }}:67:67/udp" # used by the relay
            - "{{ pihole_http_port }}:80/tcp"
          dns:
            - 127.0.0.1
          environment:
            TZ: Europe/Berlin
            FTLCONF_dns_reply_host_IPv4: "{{ ansible_default_ipv4.address }}"
            FTLCONF_webserver_api_password: "{{ pihole_webpassword }}"
            FTLCONF_dns_upstreams: "{{ router_ip }}"
            FTLCONF_dns_listeningMode: all
            FTLCONF_dns_bogusPriv: "false"
            FTLCONF_dns_domainNeeded: "false"
            FTLCONF_dns_revServers: true,{{ cidr }},{{ router_ip }},lan
            FTLCONF_dhcp_active: "true"
            FTLCONF_dhcp_start: "{{ dhcp_start }}"
            FTLCONF_dhcp_end: "{{ dhcp_end }}"
            FTLCONF_dhcp_router: "{{ router_ip }}"
            FTLCONF_dns_domain: lan
            FTLCONF_misc_etc_dnsmasq_d: "true"
          # Volumes store your data between container upgrades
          volumes:
            - "{{ pihole_config_folder }}:/etc/pihole/"
            - "{{ dnsmasq_config_folder }}:/etc/dnsmasq.d/"
          # Recommended but not required (DHCP needs NET_ADMIN)
          cap_add:
            # See https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
            # Required if you are using Pi-hole as your DHCP server, else not needed
            - NET_ADMIN
            # Required if you are using Pi-hole as your NTP client to be able to set the host's system time
            - SYS_TIME
            # Optional, if Pi-hole should get some more processing time
            - SYS_NICE
          restart: unless-stopped
          labels:
            wud.tag.include: latest
            wud.watch.digest: true
            homepage.group: "{{ pihole_service.group }}"
            homepage.name: "{{ pihole_service.name }}"
            homepage.href: https://{{ pihole_service.domain }}/admin/
            homepage.icon: mdi-pi-hole
          depends_on:
            - dhcphelper
          networks:
            backend:
              ipv4_address: 172.31.0.100

        dhcphelper:
          restart: unless-stopped
          container_name: dhcphelper
          network_mode: host
          image: homeall/dhcphelper:latest
          environment:
            IP: 172.31.0.100
            TZ: Europe/Berlin
          cap_add:
            - NET_ADMIN

        dnsmasq-leases-ui:
          image: kirel/dnsmasq-leases-ui:latest
          container_name: dnsmasq_leases_ui
          ports:
            - "{{ leases_service.http_port }}:5000"
          volumes:
            - "{{ pihole_config_folder }}:/var/lib/misc:ro"
          restart: unless-stopped
          labels:
            wud.tag.include: latest
            wud.watch.digest: true
            homepage.group: "{{ leases_service.group }}"
            homepage.name: "{{ leases_service.name }}"
            homepage.href: https://{{ leases_service.domain }}
            homepage.icon: mdi-dns
            homepage.server: "{{ inventory_hostname }}"
            homepage.container: dnsmasq_leases_ui

  register: output

- ansible.builtin.debug:
    var: output

- ansible.builtin.assert:
    that:
      - output.containers | selectattr('Name', 'equalto', 'pihole') | map(attribute='State') | list | first == 'running'

- name: Create symbolic link
  ansible.builtin.file:
    src: dhcp.leases
    dest: "{{ pihole_config_folder }}/dnsmasq.leases"
    state: link

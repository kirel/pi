- name: Disable stubresolver
  ansible.builtin.lineinfile:
    path: /etc/systemd/resolved.conf
    regexp: '^#?DNSStubListener='
    line: DNSStubListener=no
  notify: restart resolved

- name: Follow system netplan
  ansible.builtin.file:
    src: /run/systemd/resolve/resolv.conf
    dest: /etc/resolv.conf
    state: link
    force: yes
  notify: restart resolved

- name: Flush handlers
  meta: flush_handlers

- name: create folder config folders
  file: path={{item}} state=directory
  with_items:
  - "{{pihole_config_folder}}"

- template:
    src: custom.list
    dest: "{{pihole_config_folder}}/custom.list"
    owner: "{{username}}"
  notify: restart dns

- name: Start pihole
  community.docker.docker_compose:
    project_name: pihole
    build: yes
    definition:
      version: '3'
      volumes:
        pihole:
        dnsmasq:
      services:
        pihole:
          container_name: pihole
          image: pihole/pihole:latest
          ports:
            - "53:53/tcp"
            - "53:53/udp"
            - "67:67/udp"
            - "{{ pihole_http_port }}:80/tcp"
          environment:
            TZ: 'Europe/Berlin'
            ServerIP: '{{ ansible_default_ipv4.address }}'
            PIHOLE_DNS_: '{{ router_ip }}'
            WEBPASSWORD: '{{ pihole_webpassword }}'
            DNS_BOGUS_PRIV: "false"
            DNS_FQDN_REQUIRED: "false"
            REV_SERVER: "true"
            REV_SERVER_DOMAIN: "lan"
            REV_SERVER_TARGET: '{{ router_ip }}'
            REV_SERVER_CIDR: '{{ cidr }}'
            DHCP_ACTIVE: "false"
          # Volumes store your data between container upgrades
          volumes:
            - "{{pihole_config_folder}}:/etc/pihole/"
            - 'dnsmasq:/etc/dnsmasq.d/'
          # Recommended but not required (DHCP needs NET_ADMIN)
          #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
          cap_add:
            - NET_ADMIN
          restart: unless-stopped
  register: output

- ansible.builtin.debug:
    var: output

- ansible.builtin.assert:
    that:
      - "output.services.pihole.pihole.state.running"


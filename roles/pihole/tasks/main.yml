---
- ansible.builtin.set_fact:
    pihole_service: "{{ services['pihole-'~inventory_hostname] }}"
    leases_service: "{{ services['dnsmasq-leases-ui-'~inventory_hostname] }}"

- ansible.builtin.debug:
    var: pihole_service
- ansible.builtin.debug:
    var: leases_service

- name: Create folder config folders
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ pihole_config_folder }}"
    - "{{ dnsmasq_config_folder }}"

- name: Create dnsmasq config for passing both Pihole instances as DNS servers
  ansible.builtin.template:
    src: dhcp_conf.j2
    dest: "{{ dnsmasq_config_folder }}/04-dhcp-dns-failover.conf"
    owner: "{{ username }}"
  notify: Reload pihole dns

- name: Construct static DHCP entries list
  ansible.builtin.set_fact:
    static_dhcp_list: >-
      {%- set entries = [] -%}
      {%- for host, properties in static_dhcp.items() -%}
        {%- set ip = properties.ip | default(ip_prefix ~ properties.ip_suffix if (properties.ip_suffix is defined and ip_prefix
      is defined) else omit) -%}
        {%- set hostname = properties.hostname | default(host) -%}
        {%- set entry_parts = [properties.mac] -%}
        {%- if ip is defined and ip -%}
          {%- set _ = entry_parts.append(ip) -%}
        {%- endif -%}
        {%- if hostname is defined and hostname -%}
          {%- set _ = entry_parts.append(hostname) -%}
        {%- endif -%}
        {%- if properties.nopihole is defined and properties.nopihole -%}
          {%- set _ = entry_parts.append('set:nopihole') -%}
        {%- endif -%}
        {%- set _ = entries.append(entry_parts | join(',')) -%}
      {%- endfor -%}
      {{- entries | join(';') -}}

- name: Debug static_dhcp_list
  ansible.builtin.debug:
    var: static_dhcp_list
    verbosity: 1 # Only show in verbose mode

- name: Construct custom DNS entries list
  ansible.builtin.set_fact:
    custom_dns_list: >-
      {%- set entries = [] -%}
      {%- set _ = entries.append(router_ip ~ ' router.lan') -%}
      {%- set _ = entries.append(homelab_nuc_ip ~ ' homelab-nuc.lan') -%}
      {%- set _ = entries.append(nameserver_pi_ip ~ ' pihole-pi.lan') -%}
      {%- set _ = entries.append(ailab_ip ~ ' ailab.lan') -%}
      {%- set _ = entries.append(homelab_nuc_ip ~ ' ollama-ailab.lan') -%}
      {{- entries | join(';') -}}

- name: Debug custom_dns_list
  ansible.builtin.debug:
    var: custom_dns_list
    verbosity: 1 # Only show in verbose mode

- name: Construct custom CNAME entries list for services
  ansible.builtin.set_fact:
    custom_cname_list: >-
      {%- set entries = [] -%}
      {%- for service_name, props in services.items() -%}
        {%- set cname = props.domain | default(service_name ~ '.lan') -%}
        {%- set proxy = "homelab-nuc.lan" -%}
        {%- set _ = entries.append(cname ~ ',' ~ proxy) -%}
      {%- endfor -%}
      {{- entries | join(';') -}}

- name: Debug custom_cname_list
  ansible.builtin.debug:
    var: custom_cname_list
    verbosity: 1 # Only show in verbose mode

- name: Start pihole
  community.docker.docker_compose_v2:
    project_name: pihole
    pull: always # Set to "always", "missing", "never", or "policy" based on your needs
    state: present # Ensure the services are started
    definition:
      networks:
        backend:
          ipam:
            config:
              - subnet: 172.31.0.0/16
        proxy-tier:
          external: true
      services:
        pihole:
          container_name: pihole
          hostname: pihole
          image: pihole/pihole:latest
          ports:
            - "{{ ansible_default_ipv4.address }}:53:53/tcp"
            - "{{ ansible_default_ipv4.address }}:53:53/udp"
            # - "{{ ansible_default_ipv4.address }}:67:67/udp" # used by the relay
            - "{{ pihole_http_port }}:80/tcp"
            - 123:123/udp
          environment:
            TZ: Europe/Berlin
            FTLCONF_dns_reply_host_force4: "true"
            FTLCONF_dns_reply_host_IPv4: "{{ ansible_default_ipv4.address }}"
            FTLCONF_webserver_api_password: "{{ pihole_webpassword }}"
            FTLCONF_dns_upstreams: "{{ google_dns_servers | join(';') }}"
            FTLCONF_dns_listeningMode: all
            FTLCONF_dns_bogusPriv: "true"
            FTLCONF_dns_domainNeeded: "true"
            FTLCONF_dhcp_active: "true"
            FTLCONF_dhcp_start: "{{ dhcp_start }}"
            FTLCONF_dhcp_end: "{{ dhcp_end }}"
            FTLCONF_dhcp_router: "{{ router_ip }}"
            FTLCONF_dns_domain: lan
            FTLCONF_misc_etc_dnsmasq_d: "true"
            FTLCONF_dns_hosts: "{{ custom_dns_list }}"
            FTLCONF_dns_cnameRecords: "{{ custom_cname_list }}"
            FTLCONF_dhcp_hosts: "{{ static_dhcp_list }}"
          # Volumes store your data between container upgrades
          volumes:
            - "{{ pihole_config_folder }}:/etc/pihole/"
            - "{{ dnsmasq_config_folder }}:/etc/dnsmasq.d/"
          # Recommended but not required (DHCP needs NET_ADMIN)
          cap_add:
            # See https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
            # Required if you are using Pi-hole as your DHCP server, else not needed
            - NET_ADMIN
            # Required if you are using Pi-hole as your NTP client to be able to set the host's system time
            - SYS_TIME
            # Optional, if Pi-hole should get some more processing time
            - SYS_NICE
          restart: unless-stopped
          labels:
            wud.tag.include: latest
            wud.watch.digest: true
            homepage.group: "{{ pihole_service.group }}"
            homepage.name: "{{ pihole_service.name }}"
            homepage.href: https://{{ pihole_service.domain }}/admin/
            homepage.icon: mdi-pi-hole
          depends_on:
            - dhcphelper
          networks:
            backend:
              ipv4_address: 172.31.0.100

        dhcphelper:
          restart: unless-stopped
          container_name: dhcphelper
          network_mode: host
          image: homeall/dhcphelper:latest
          environment:
            IP: 172.31.0.100
            TZ: Europe/Berlin
          cap_add:
            - NET_ADMIN

        dnsmasq-leases-ui:
          image: kirel/dnsmasq-leases-ui:latest
          container_name: dnsmasq_leases_ui
          ports:
            - "{{ leases_service.http_port }}:5000"
          volumes:
            - "{{ pihole_config_folder }}/dhcp.leases:/var/lib/misc/dnsmasq.leases:ro"
          restart: unless-stopped
          labels:
            wud.tag.include: latest
            wud.watch.digest: true
            homepage.group: "{{ leases_service.group }}"
            homepage.name: "{{ leases_service.name }}"
            homepage.href: https://{{ leases_service.domain }}
            homepage.icon: mdi-dns
            homepage.server: "{{ inventory_hostname }}"
            homepage.container: dnsmasq_leases_ui

  register: output

- name: Assert pihole container is running
  ansible.builtin.assert:
    that:
      - output.containers | selectattr('Name', 'equalto', 'pihole') | map(attribute='State') | list | first == 'running'

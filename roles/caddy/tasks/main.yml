---
- name: Create folder config folders
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
  with_items:
    - "{{ caddy_folder }}"
    - "{{ caddy_data_folder }}"
    - "{{ caddy_config_folder }}"

- name: Reposess config folders
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ username }}"
    group: users
    mode: u=rwx,g=rwxs
    recurse: true
  with_items:
    - "{{ caddy_folder }}"
    - "{{ caddy_data_folder }}"
    - "{{ caddy_config_folder }}"

- name: Copy Caddyfile
  ansible.builtin.template:
    src: Caddyfile.j2
    dest: "{{ caddy_folder }}/Caddyfile"
    owner: "{{ username }}"
  register: caddyfile
  notify: Reload Caddy

- name: Copy Dockerfile
  ansible.builtin.template:
    src: Dockerfile
    dest: "{{ caddy_folder }}/Dockerfile"
    owner: "{{ username }}"
  register: dockerfile

- name: Start caddy
  community.docker.docker_compose_v2:
    project_name: caddy
    pull: always # or "missing", "never", "policy" based on your needs
    build: always # or "always", "never"
    state: present # Ensure the services are started
    definition:
      # Networks are not used in host network mode for this service
      services:
        caddy:
          network_mode: host
          container_name: caddy
          build:
            context: "{{ caddy_folder }}"
            dockerfile: "{{ caddy_folder }}/Dockerfile"
          restart: unless-stopped
          user: "{{ uid }}:{{ uid }}"
          volumes:
            - "{{ caddy_folder }}/Caddyfile:/etc/caddy/Caddyfile"
            - "{{ caddy_data_folder }}:/data"
            - "{{ caddy_config_folder }}:/config"
          environment:
            CADDY_ADMIN: "0.0.0.0:2019"
          cap_add:
            - NET_ADMIN
          labels:
            - wud.tag.include=latest
            - wud.watch.digest=true
            - homepage.group=Network
            - homepage.name=Caddy
            - homepage.icon=mdi-server
            - homepage.server={{ inventory_hostname }}
            - homepage.container=caddy
            - homepage.widget.type=caddy
            - homepage.widget.url=http://homelab-nuc.lan:2019 # Use host-resolvable name as Caddy is in host network mode

  register: output

- ansible.builtin.debug:
    var: output

- ansible.builtin.assert:
    that:
      - output.containers | selectattr('Name', 'equalto', 'caddy') | list | length > 0
      - output.containers | selectattr('Name', 'equalto', 'caddy') | map(attribute='State') | list | first == 'running'

- name: Copy root certificate
  ansible.builtin.command: docker cp caddy:/data/caddy/pki/authorities/local/root.crt {{ caddy_folder }}/root.crt
- ansible.builtin.fetch:
    src: "{{ caddy_folder }}/root.crt"
    dest: tmp/
    flat: true

# Note: Installing the cert into the host's trust store is now handled by the 'trust-internal-ca' role.
# The fetch task above is still needed so that role can access the cert.

- name: Reposess root cert on host after docker cp
  ansible.builtin.file:
    path: "{{ caddy_folder }}/root.crt" # Path where docker cp placed it
    owner: "{{ username }}"
    group: users
    mode: u=rw,g=rw

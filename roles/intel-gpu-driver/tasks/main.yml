---
- name: Define target kernel version
  ansible.builtin.set_fact:
    target_kernel_version: 6.5.0-35-generic
    target_kernel_package_version: 6.5.0-35 # Version used in package names

- name: Check if target kernel is already running
  ansible.builtin.assert:
    that: ansible_kernel == target_kernel_version
    quiet: true
  register: kernel_check
  ignore_errors: true # Continue if assertion fails (means kernel needs update)

- name: Install target kernel packages if not running
  become: true
  ansible.builtin.apt:
    name:
      - linux-image-{{ target_kernel_version }}
      - linux-headers-{{ target_kernel_version }}
      - linux-modules-extra-{{ target_kernel_package_version }}-generic # Note: package name structure
    state: present
    update_cache: true
  when: kernel_check.failed
  notify: Reboot system

# GRUB update is complex and potentially fragile. Using shell commands based on Intel's guide.
# Ensure grub-customizer or similar tools are not interfering.
- name: Get GRUB menu entries
  become: true
  ansible.builtin.command:
    cmd: awk -F\' '/menuentry / {print $2}' /boot/grub/grub.cfg
  register: grub_entries
  changed_when: false
  when: kernel_check.failed
  check_mode: false # This command needs to run to get data

- name: Calculate GRUB index for target kernel
  become: true
  ansible.builtin.command:
    cmd: >
      echo "$(awk -F\\' '/menuentry / {print $2}' /boot/grub/grub.cfg |
      grep -no '{{ target_kernel_package_version }}-generic' | sed 's/:/\\n/g' | head -n 1)"
  register: grub_index_raw
  changed_when: false
  when: kernel_check.failed and grub_entries.stdout is defined
  check_mode: false

- name: Set GRUB default entry index
  ansible.builtin.set_fact:
    grub_default_index: "{{ (grub_index_raw.stdout | int) - 1 }}" # awk index is 1-based, grub menu is 0-based? Let's re-check Intel's logic.
    # Intel's logic: `$(($(awk ... | grep ... | head -n 1)-2))` - This seems to account for header entries?
    # Let's try a simpler approach first: Set GRUB_DEFAULT directly to the menu entry title if possible, or use the calculated index carefully.
    # Intel's command: GRUB_DEFAULT="1> $(echo $(($(awk ... | grep ... | head -n 1)-2)))"
    # Let's replicate Intel's index calculation logic more closely.
    grub_calculated_index_intel: "{{ (grub_index_raw.stdout | int) - 2 }}"
  when: kernel_check.failed and grub_index_raw.stdout is defined and grub_index_raw.stdout | trim != ""

- name: Update GRUB default configuration
  become: true
  ansible.builtin.lineinfile:
    path: /etc/default/grub
    regexp: ^GRUB_DEFAULT=.*
    line: GRUB_DEFAULT="1> {{ grub_calculated_index_intel }}"
    state: present
    backrefs: false # Replace the whole line regardless of previous content
  register: grub_config_updated
  when: kernel_check.failed and grub_calculated_index_intel is defined

- name: Update GRUB bootloader configuration
  become: true
  ansible.builtin.command:
    cmd: update-grub
  when: grub_config_updated.changed
  notify: Reboot system
  changed_when: true # Assume changed if run

- name: Install prerequisites for Intel GPU driver repository
  become: true
  ansible.builtin.apt:
    name:
      - gpg-agent
      - wget
    state: present
    # update_cache: true # Defer cache update until after adding repos

# Download key to temporary location first
- name: Add Intel GPU repository key (Download)
  become: true
  ansible.builtin.get_url:
    url: https://repositories.intel.com/gpu/intel-graphics.key
    dest: /tmp/intel-graphics.key # Temporary location
    mode: "0644"
    force: true
  register: key_download

# De-armor from temporary location to final destination
- name: De-armor Intel GPU repository key
  become: true
  ansible.builtin.command:
    # Removed 'creates' to ensure it runs if key was downloaded, potentially overwriting bad file
    cmd: gpg --dearmor --yes --output /usr/share/keyrings/intel-graphics.gpg /tmp/intel-graphics.key
  args: {}
  when: key_download.changed # Only run if key was downloaded/updated
  changed_when: true # Assume changed if run
  vars:
    ansible_check_mode: false # Ensure this runs even in check mode if needed for setup

# Ensure correct permissions on the final key file
- name: Set permissions for Intel GPU key file
  become: true
  ansible.builtin.file:
    path: /usr/share/keyrings/intel-graphics.gpg
    mode: "0644"
  when: key_download.changed # Only adjust permissions if we potentially modified the key

# Clean up temporary key file
- name: Remove temporary Intel GPU key file
  become: true
  ansible.builtin.file:
    path: /tmp/intel-graphics.key
    state: absent
  when: key_download.changed # Only clean up if we downloaded it
  changed_when: false

- name: Add Intel GPU repository (for Intel Core CPU / Arc A770)
  become: true
  ansible.builtin.apt_repository:
    repo: deb [arch=amd64,i386 signed-by=/usr/share/keyrings/intel-graphics.gpg] https://repositories.intel.com/gpu/ubuntu {{ ansible_distribution_release }} client
    filename: intel-gpu-{{ ansible_distribution_release }}
    state: present
    update_cache: true

- name: Force apt cache update before installing drivers
  become: true
  ansible.builtin.apt:
    update_cache: true
  # Add retries specifically for this update step
  retries: 3
  delay: 5

- name: Install driver prerequisites and compute runtime packages
  become: true
  ansible.builtin.apt:
    name:
      # Prerequisites
      - gawk
      - dkms
      # Install headers for the TARGET kernel, not the running one, for DKMS
      - linux-headers-{{ target_kernel_version }}
      - libc6-dev
      # Driver
      - intel-i915-dkms # Assuming standard version, adjust if Iris specific needed
      - intel-fw-gpu
      # Compute Runtime
      - udev
      - intel-opencl-icd
      - intel-level-zero-gpu
      - level-zero
      - intel-media-va-driver-non-free
      - libmfx1
      - libmfxgen1
      - libvpl2
      - libegl-mesa0
      - libegl1-mesa
      - libegl1-mesa-dev
      - libgbm1
      - libgl1-mesa-dev
      - libgl1-mesa-dri
      - libglapi-mesa
      - libgles2-mesa-dev
      - libglx-mesa0
      - libigdgmm12
      - libxatracker2
      - mesa-va-drivers
      - mesa-vdpau-drivers
      - mesa-vulkan-drivers
      - va-driver-all
      - vainfo
      # Verification tool
      - hwinfo
      - clinfo
    state: present
    # update_cache: true
  notify: Reboot system # Reboot needed after driver install

- name: Add oneAPI repository key
  become: true
  ansible.builtin.get_url:
    url: https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
    dest: /usr/share/keyrings/oneapi-archive-keyring.gpg.tmp # Download temporarily
    mode: "0644"
    force: true
  register: oneapi_key_download

- name: De-armor oneAPI repository key
  become: true
  ansible.builtin.command:
    cmd: gpg --dearmor --yes --output /usr/share/keyrings/oneapi-archive-keyring.gpg /usr/share/keyrings/oneapi-archive-keyring.gpg.tmp
    creates: /usr/share/keyrings/oneapi-archive-keyring.gpg
  args: {} # Removed invalid 'warn: false'
  when: oneapi_key_download.changed
  changed_when: true
  vars:
    ansible_check_mode: false

- name: Remove temporary oneAPI key file
  become: true
  ansible.builtin.file:
    path: /usr/share/keyrings/oneapi-archive-keyring.gpg.tmp
    state: absent
  when: oneapi_key_download.changed
  changed_when: false

- name: Add oneAPI repository
  become: true
  ansible.builtin.apt_repository:
    repo: deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main
    filename: oneAPI
    state: present
    update_cache: true

- name: Install specific oneAPI 2024.0 packages
  become: true
  ansible.builtin.apt:
    name:
      - intel-oneapi-common-vars=2024.0.0-49406
      - intel-oneapi-common-oneapi-vars=2024.0.0-49406
      - intel-oneapi-diagnostics-utility=2024.0.0-49093
      - intel-oneapi-compiler-dpcpp-cpp=2024.0.2-49895
      - intel-oneapi-dpcpp-ct=2024.0.0-49381
      - intel-oneapi-mkl=2024.0.0-49656
      - intel-oneapi-mkl-devel=2024.0.0-49656
      - intel-oneapi-mpi=2021.11.0-49493
      - intel-oneapi-mpi-devel=2021.11.0-49493
      - intel-oneapi-dal=2024.0.1-25
      - intel-oneapi-dal-devel=2024.0.1-25
      - intel-oneapi-ippcp=2021.9.1-5
      - intel-oneapi-ippcp-devel=2021.9.1-5
      - intel-oneapi-ipp=2021.10.1-13
      - intel-oneapi-ipp-devel=2021.10.1-13
      - intel-oneapi-tlt=2024.0.0-352
      - intel-oneapi-ccl=2021.11.2-5
      - intel-oneapi-ccl-devel=2021.11.2-5
      - intel-oneapi-dnnl-devel=2024.0.0-49521
      - intel-oneapi-dnnl=2024.0.0-49521
      - intel-oneapi-tcm-1.0=1.0.0-435
    state: present
    update_cache: true
  notify: Reboot system # Reboot needed after oneAPI install

- name: Ensure render group exists
  become: true
  ansible.builtin.group:
    name: render
    state: present

- name: Add user {{ ansible_user }} to render group
  become: true
  ansible.builtin.user:
    name: "{{ ansible_user }}" # Or specify a different user if needed
    groups: render
    append: true
  notify: Reboot system # User needs to log out/in or reboot for group change to take effect

- name: Ensure handlers are flushed if changes were made
  ansible.builtin.meta: flush_handlers

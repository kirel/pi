---
# tasks file for llm

- name: Define Docker network name
  ansible.builtin.set_fact:
    llm_network_name: "{{ llm_network_name }}"

- name: Ensure Docker network exists
  community.docker.docker_network:
    name: "{{ llm_network_name }}"
    state: present
  become: true

- name: Ensure models directory exists
  ansible.builtin.file:
    path: "{{ ollama_path }}"
    state: directory
    mode: "0755"
  become: true

- name: Start the Ollama container
  community.docker.docker_container:
    name: "{{ ollama_container_name }}"
    image: "{{ ollama_image }}"
    pull: true
    state: started
    restart_policy: "{{ ollama_restart_policy }}"
    networks:
      - name: "{{ llm_network_name }}"
    ports:
      - "11434:11434"
    volumes:
      - "{{ ollama_path }}:/root/.ollama"
    device_requests:
      - driver: nvidia
        count: -1
        capabilities:
          - [gpu]
    env:
      OLLAMA_HOST: "0.0.0.0"
      OLLAMA_FLASH_ATTENTION: "1"
      OLLAMA_KV_CACHE_TYPE: "q8_0"
      OLLAMA_CONTEXT_LENGTH: "16384"
      OLLAMA_NUM_PARALLEL: "2"
      OLLAMA_MAX_LOADED_MODELS: "2"
  become: true
  notify: Restart Ollama container

# Block for MCP-Bridge setup
- name: MCP-Bridge Setup
  become: true # Most Docker and file operations need sudo
  block:
    - name: Define MCP-Bridge related facts
      ansible.builtin.set_fact:
        mcp_bridge_config_full_host_path: "{{ mcp_bridge_config_dir_host }}/{{ mcp_bridge_config_filename }}"

    - name: Ensure MCP-Bridge source directory exists
      ansible.builtin.file:
        path: "{{ mcp_bridge_src_path | ansible.builtin.dirname }}"
        state: directory
        mode: "0755"

    - name: Clone or update the MCP-Bridge repository
      ansible.builtin.git:
        repo: "{{ mcp_bridge_repo_url }}"
        dest: "{{ mcp_bridge_src_path }}"
        version: "{{ mcp_bridge_repo_version }}"
        force: true
        depth: 1
      register: git_clone_mcp_bridge_result

    - name: Pin MCP version in pyproject.toml for MCP-Bridge
      ansible.builtin.replace:
        path: "{{ mcp_bridge_src_path }}/pyproject.toml"
        regexp: 'mcp>=1\.2\.0'
        replace: 'mcp==1.7.0'
      register: pin_mcp_version_result

    - name: Build the MCP-Bridge image
      community.docker.docker_image:
        name: "{{ mcp_bridge_image }}"
        source: build
        force_source: "{{ git_clone_mcp_bridge_result.changed or pin_mcp_version_result.changed or force_update | default(false) }}"
        build:
          path: "{{ mcp_bridge_src_path }}"
          pull: true # Attempt to pull base images for the build
          rm: true # Remove intermediate containers after a successful build
        state: present

    - name: Ensure MCP-Bridge config directory exists on host
      ansible.builtin.file:
        path: "{{ mcp_bridge_config_dir_host }}"
        state: directory
        mode: "0755"

    - name: Template MCP-Bridge config.json
      ansible.builtin.template:
        src: mcp_bridge_config.json.j2
        dest: "{{ mcp_bridge_config_full_host_path }}"
        mode: "0644"
      notify: Restart MCP-Bridge container

    - name: Define MCP-Bridge container environment variables
      ansible.builtin.set_fact:
        mcp_bridge_env_vars:
          MCP_BRIDGE__CONFIG__FILE: "/app/config.json" # Points to the mounted config file

    - name: Start the MCP-Bridge container
      community.docker.docker_container:
        name: "{{ mcp_bridge_container_name }}"
        image: "{{ mcp_bridge_image }}"
        state: started
        detach: true
        ports:
          - "{{ mcp_bridge_service_port }}:8000"
        volumes:
          - "{{ mcp_bridge_config_full_host_path }}:/app/config.json:ro" # Mount config read-only
        env: "{{ mcp_bridge_env_vars }}"
        networks:
          - name: "{{ llm_network_name }}"
        restart_policy: "unless-stopped"


- name: LiteLLM Proxy Setup
  become: true
  block:
    - name: Define LiteLLM Proxy related facts
      ansible.builtin.set_fact:
        litellm_proxy_config_full_host_path: "{{ litellm_proxy_config_dir_host }}/{{ litellm_proxy_config_filename }}"

    - name: Ensure LiteLLM Proxy config directory exists on host
      ansible.builtin.file:
        path: "{{ litellm_proxy_config_dir_host }}"
        state: directory
        mode: "0755"

    - name: Template LiteLLM Proxy config.yaml
      ansible.builtin.template:
        src: litellm_config.yaml.j2
        dest: "{{ litellm_proxy_config_full_host_path }}"
        mode: "0644"
      notify: Restart LiteLLM Proxy container

    - name: Define LiteLLM Proxy container environment variables
      ansible.builtin.set_fact:
        litellm_proxy_env_vars:
          LANGFUSE_PUBLIC_KEY: "{{ langfuse_homelab_public_key }}"
          LANGFUSE_SECRET_KEY: "{{ langfuse_homelab_secret_key }}"
          LANGFUSE_HOST: "{{ langfuse_host_for_litellm }}"
          LITELLM_MASTER_KEY: "{{ litellm_master_key }}"
          GEMINI_API_KEY: "{{ GEMINI_API_KEY }}"
          OPENROUTER_API_KEY: "{{ OPENROUTER_API_KEY }}"
          # LITELLM_LOG_LEVEL: "DEBUG"

    - name: Start LiteLLM Proxy container
      community.docker.docker_container:
        name: "{{ litellm_proxy_container_name }}"
        image: "{{ litellm_proxy_image }}"
        state: started
        detach: true
        ports:
          - "{{ litellm_proxy_port_host }}:{{ litellm_proxy_port_container }}"
        volumes:
          - "{{ litellm_proxy_config_full_host_path }}:/app/config.yaml:ro"
        env: "{{ litellm_proxy_env_vars }}"
        command: ["--config", "/app/config.yaml", "--port", "{{ litellm_proxy_port_container }}"] # Add --detailed_debug here if needed for troubleshooting
        networks:
          - name: "{{ llm_network_name }}"
        restart_policy: "unless-stopped"
      register: litellm_proxy_container_result

    - name: Debug LiteLLM Proxy container result
      ansible.builtin.debug:
        var: litellm_proxy_container_result
      when: litellm_proxy_container_result is defined and litellm_proxy_container_result.changed

- name: Langfuse Setup
  become: true
  block:
    - name: Define Langfuse related facts
      ansible.builtin.set_fact:
        langfuse_config_dir_host: "{{ llm_base_config_path }}/langfuse"
        langfuse_compose_file_dest: "{{ llm_base_config_path }}/langfuse/docker-compose.yml"

    - name: Ensure Langfuse config directory exists on host
      ansible.builtin.file:
        path: "{{ langfuse_config_dir_host }}"
        state: directory
        mode: "0755"

    - name: Template Langfuse docker-compose.yml
      ansible.builtin.template:
        src: langfuse-docker-compose.yml.j2
        dest: "{{ langfuse_compose_file_dest }}"
        mode: "0644"

    - name: Start Langfuse services with Docker Compose
      community.docker.docker_compose_v2:
        project_src: "{{ langfuse_config_dir_host }}" # Directory containing the docker-compose.yml
        state: present # Ensures services are running, creates them if not present
        pull: always # Optionally pull images
      register: langfuse_compose_result

    - name: Debug Langfuse compose result
      ansible.builtin.debug:
        var: langfuse_compose_result
      when: langfuse_compose_result is defined and langfuse_compose_result.changed

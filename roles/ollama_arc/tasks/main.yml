---
# tasks file for ollama-arc

- name: Ensure models directory exists
  ansible.builtin.file:
    path: "{{ ollama_arc_models_path }}"
    state: directory
    mode: "0755"
  become: true

# Block for building the image locally (always runs)
- name: Build ipex-llm-inference-cpp-xpu image from source
  become: true # Often needed for git checkout destination and docker build
  block:
    - name: Ensure git package is present for cloning
      ansible.builtin.package:
        name: git
        state: latest

    - name: Ensure build destination directory exists
      ansible.builtin.file:
        path: "{{ ollama_arc_build_repo_dest | ansible.builtin.dirname }}" # Ensure parent dir exists
        state: directory
        mode: "0755"

    - name: Clone or update the ipex-llm repository
      ansible.builtin.git:
        repo: "{{ ollama_arc_build_repo_url }}"
        dest: "{{ ollama_arc_build_repo_dest }}"
        version: "{{ ollama_arc_build_repo_version }}"
        force: true # Ensure the correct version is checked out
        depth: 1 # Perform a shallow clone
      register: git_clone_result # Register the result

    - name: Build the ipex-llm-inference-cpp-xpu image
      when: false
      community.docker.docker_image:
        name: "{{ ollama_arc_image }}"
        source: build
        force_source: "{{ git_clone_result.changed or force_update | default(false) }}"
        build:
          path: "{{ ollama_arc_build_repo_dest }}/{{ ollama_arc_build_context_subdir }}"
          args: "{{ ollama_arc_build_args }}" # Correct parameter name is 'args'
          # nocache: "{{ git_clone_result.changed or force_update | default(false) }}" # Rebuild if repo changed or forced
          rm: "{{ ollama_arc_build_rm }}"
          pull: true # Attempt to pull base images
        state: present

    - name: Build the ipex-llm-serving-xpu image
      community.docker.docker_image:
        name: "{{ ipex_vllm_image }}"
        source: build
        force_source: "{{ force_update | default(false) }}"
        build:
          path: "{{ ollama_arc_build_repo_dest }}"
          dockerfile: "{{ ipex_vllm_build_context_subdir }}/Dockerfile"
          args: "{{ ollama_arc_build_args }}" # Correct parameter name is 'args'
          # rm: "{{ ollama_arc_build_rm }}"
          pull: true # Attempt to pull base images
        state: present

- name: Define ollama container environment variables
  ansible.builtin.set_fact:
    ollama_arc_env_vars:
      no_proxy: "{{ ollama_arc_no_proxy }}"
      DEVICE: "{{ ollama_arc_device_type }}"
      OLLAMA_DEBUG: "0"
      OLLAMA_HOST: "0.0.0.0" # Listen on all interfaces
      OLLAMA_MODELS: /models # Set Ollama's model storage path
      OLLAMA_NUM_GPU: "999" # Use all available GPUs for Ollama (as string)
      OLLAMA_FLASH_ATTENTION: "1" # Not supported yet by ipex-llm
      OLLAMA_KV_CACHE_TYPE: "q8_0" # Not supported yet by ipex-llm
      OLLAMA_CONTEXT_LENGTH: "16384" # "32768"
      IPEX_LLM_NUM_CTX: "16384" # "32768"
      SYCL_CACHE_PERSISTENT: "1"
      SYCL_PI_LEVEL_ZERO_USE_IMMEDIATE_COMMANDLISTS: "1"
      ZES_ENABLE_SYSMAN: "1" # Required for sysman metrics (as string)
      ONEAPI_DEVICE_SELECTOR: "level_zero:2" # B580

- name: Start the ipex-llm-inference-cpp-xpu container
  community.docker.docker_container:
    name: "{{ ollama_arc_container_name }}"
    image: "{{ ollama_arc_image }}"
    ulimits:
      - 'memlock:-1:-1'
    command: >
      bash -c "mkdir -p /llm/ollama &&
               cd /llm/ollama &&
               mkdir -p /llm/llama-cpp &&
               cd /llm/llama-cpp &&
               source ipex-llm-init --gpu --device {{ ollama_arc_device_type }} &&
               init-ollama &&
               exec ./ollama serve
               # init-llama-cpp &&
               # exec ./llama-server -m /models/qwen2.5-0.5b-instruct-q4_k_m.gguf"
    state: started
    detach: true
    network_mode: host
    devices:
      - /dev/dri/
    volumes:
      - "{{ ollama_arc_models_path }}:/models"
    env: "{{ ollama_arc_env_vars|combine({\"OLLAMA_PORT\": \"11434\"}) }}"
    memory: "{{ ollama_arc_memory }}"
    shm_size: "{{ ollama_arc_shm_size }}"
    restart_policy: "{{ ollama_arc_restart_policy }}"
  become: true

- name: Ensure vLLM script destination directory exists
  ansible.builtin.file:
    path: "{{ ipex_vllm_script_host_path }}"
    state: directory
    mode: "0755"
  become: true

- name: Copy vLLM start script to host
  ansible.builtin.copy:
    src: start-vllm-service.sh # Assumes file is in roles/ollama_arc/files/
    dest: "{{ ipex_vllm_script_host_path }}"
    mode: "0755"
  become: true

- name: Define vLLM container environment variables
  ansible.builtin.set_fact:
    vllm_env_vars:
      ONEAPI_DEVICE_SELECTOR: "level_zero:0,1" # A770
      MODEL_PATH: "Qwen/Qwen3-14B"
      SERVED_MODEL_NAME: "Qwen/Qwen3-14B"
      # VLLM_QUANTIZATION: "awq"
      MAX_NUM_BATCHED_TOKENS: "8192"
      MAX_MODEL_LEN: "8192"
      MAX_NUM_SEQS: "1"
      LOAD_IN_LOW_BIT: "sym_int4"
      CACHE_DTYPE: "fp8"
      TENSOR_PARALLEL_SIZE: "2"
      # PREFIX_CACHING: "1"
      CCL_DG2_ALLREDUCE: "1"
      # OMP_NUM_THREADS: "1"
      # NCCL_P2P_DISABLE: "1"
      # VLLM_LOGGING_LEVEL: DEBUG
      # VLLM_TRACE_FUNCTION: "1"
      DOWNLOAD_DIR: "/llm/models"
      PORT: "8001"
      CHANGED: "4"

- name: Start the ipex-llm-serving-xpu container
  community.docker.docker_container:
    name: "ipex-llm-serving-xpu-container"
    image: "{{ ipex_vllm_image }}"
    state: started # ai? restarted if the start script changed?
    detach: true
    privileged: true
    network_mode: host
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - "{{ vllm_models_path }}:/llm/models:rw"
      - "/home/daniel/.huggingface:/root/.huggingface:rw" # Mount Hugging Face cache
      - "{{ ipex_vllm_script_host_path }}/start-vllm-service.sh:/llm/start-vllm-service.sh:ro" # Mount start script read-only
    env: "{{ vllm_env_vars }}"
    # entrypoint: ["bash", "/llm/start-vllm-service.sh"] # AI? cd into /llm first
    memory: "48g"
    shm_size: "16g"
    restart_policy: "unless-stopped"
  become: true
